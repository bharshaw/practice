//Given a positive integer, return its corresponding column title as appear in an Excel sheet.
class Solution {
    String concat = "";
    public String convertToTitle(int n) {
        String[] alpha = new String[]{"","A","B","C", "D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
        
        
        if(n == 0){
            return concat;
        }
        if(n < 27){
            return alpha[n];
        }else if (n > 26){
            if(n%26 == 0){
                return alpha[(n/26)-1]+alpha[26];
            }else{
               if(n/26 > 26){ 
                    return convertToTitle(n/26)+alpha[n%26]; 
               }else{
                   return alpha[(n/26)]+alpha[n%26];
               }
            }
        }else{
            return concat;
        }
    }
}


//------------------------------------------------------------------------------------------------------------------
/*
*Given an array A of integers, we must modify the array in the following way: we 
*choose an i and replace A[i] with -A[i], and we repeat this process K times in total.  
*(We may choose the same index i multiple times.)
*
*Return the largest possible sum of the array after modifying it in this way.
*/

class Solution {
    public int largestSumAfterKNegations(int[] A, int K) {
        int sum = 0;
        while(K > 0){
            int smallest = 0;
            for(int i = 0; i < A.length; i++){
                //if(A[i] == 0){continue;}
                if(A[i] < A[smallest]){
                    smallest = i;
                }
            }
            A[smallest] = A[smallest]*(-1);
            K--;
        }
        for(int i : A){
            sum = sum+i;
        }
        return sum;
    }
}

//------------------------------------------------------------------------------------------------------------------
/*
*Given an array of integers nums, write a method that returns the "pivot" index of this array.
*We define the pivot index as the index where the sum of the numbers 
*to the left of the index is equal to the sum of the numbers to the right of the index.
*If no such index exists, we should return -1. If there are multiple pivot 
*indexes, you should return the left-most pivot index.
*/


class Solution {
    public int pivotIndex(int[] nums) {
        int pivot = 0;
        int left = 0;
        int right = 0;
        
        if(nums.length == 0){
            return -1;
        }
        while(pivot <= nums.length-1){
            if(pivot == 0){
                left = 0;
            }else{
                for(int i = pivot -1; i >= 0; i--){
                    left+=nums[i];
                }
            }
            if(pivot == nums.length-1){
                right = 0;
            }else{
                for(int i = pivot+1; i <= nums.length-1; i++){
                    right+=nums[i];
                }   
            }
            if(left == right){
                return pivot;
            }
            pivot++;
            left = 0;
            right = 0;
        }
        return -1;    
    }
    
}
//-----------------------------------------------------------------------------
import java.io.File;
import java.util.LinkedList;

public class MultiplyLinkedListExample {

	public static void multiplyLinkedListSingleConvert(LinkedList<Integer> top, LinkedList<Integer> bottom){
		String topString = "";
		
		for(int i = 0; i< top.size(); i++) {
			topString+=top.get(i);
		} 
		int topConverted = Integer.parseInt(topString);
		
		int x = 1;
		int multiplied;
		int sum = 0;
						
		for(int i = bottom.size()-1; i > -1; i--) {
			multiplied = bottom.get(i) *topConverted;
			multiplied*=x;
			x*=10;
			sum+=multiplied;
			
		}					
		System.out.println(sum);
	}
	
	
	public static void multiplyLinkedListNoConvert(LinkedList<Integer> top, LinkedList<Integer> bottom){
		int multiply;
		int value = 0;
		String temp = "";
		int sum = 0;
		int[] carry = new int[top.size()];
		int[] results = new int[bottom.size()];
		for(int x = bottom.size()-1; x >= 0; x--) {
			for(int i = top.size()-1; i > -1; i--) {
				multiply = bottom.get(x) * top.get(i);
				if(carry[i] > 0){
					multiply+=carry[i];
				}		
				if(i > 0){
					value = multiply%10;
					if(multiply > 9){
						multiply/= 10;
						carry[i-1] =  multiply;
					}else{
						carry[i-1] = 0;
					}	
				}else{
					value = multiply;
				}
				temp=Integer.toString(value)+temp;
			} 
			results[x] = Integer.parseInt(temp);
			temp = "";
		}
		int multiplier  = 1;
		for(int i = results.length-1; i>=0 ; i--) {
			results[i] = results[i]*multiplier;
			sum = sum + results[i];
			multiplier = multiplier*10;
		}
		System.out.println(sum);
	}
	
	
	
	public static void main(String[] args) {
		LinkedList top = new LinkedList();
		LinkedList bottom = new LinkedList();
		top.add(2);
		top.add(7);
		top.add(9);
		
		bottom.add(1);
		bottom.add(7);
		bottom.add(3);
		bottom.add(5);
		System.out.println("-----Multiply 279 * 1735 converting only the top number to an int-------------");
		multiplyLinkedListSingleConvert(top, bottom);
		System.out.println("-----Multiply 279 * 1735 converting without converting either linkedlist to an int-------------");
		multiplyLinkedListNoConvert(top, bottom);
		
		
	}
	
}

//----------------------------------------------------------------------------------------------------------------
import java.io.File;
import java.util.LinkedList;

public class AddLinkedList {

	public static void addNumbersInSingleLinkedList(LinkedList<Integer> add){
		int sum = 0;
		for( int i : add){
			sum+=i;
		}
		System.out.print(sum);
	}
	
	public static void addLinkedListNoConvert(LinkedList<Integer> top, LinkedList<Integer> bottom){
		int add;
		int value = 0;
		String temp = "";
		int sum = 0;
		
		
		int[] carry = new int[top.size()];
		int[] results = new int[bottom.size()];
		for(int x = bottom.size()-1; x >= 0; x--) {
			add = bottom.get(x) + top.get(x);
				if(carry[x] > 0){
					add+=carry[x];
				}		
				if(x > 0){
					value = add%10;
					if(add > 9){
						add/= 10;
						carry[x-1] =  add;
					}else{
						carry[x-1] = 0;
					}	
				}else{
					value = add;
				}
				temp=Integer.toString(value)+temp;
		}
		System.out.println(temp);
	}
	
	public static void main(String[] args) {
		LinkedList top = new LinkedList();
		LinkedList bottom = new LinkedList();
		top.add(0);
		top.add(2);
		top.add(7);
		top.add(9);
		
		bottom.add(1);
		bottom.add(7);
		bottom.add(3);
		bottom.add(5);
		System.out.println("-----Add 279 + 1735 without converting either linkedlist to an int-------------");
		addLinkedListNoConvert(top, bottom);
		System.out.println("-----Add numbers in single linkedList-------------");
		addNumbersInSingleLinkedList(bottom);
		
		
	}
	
}
//-------------------------------------------------------------------------------------------------------

public class Sorting {
	public static int[] moveIntToEnd(int[] array, int x){
		int[] newArray = new int[array.length];
		int end = array.length-1;
		int start = 0;
		for(int i = 0; i< array.length -1; i++){
			if(i == 0){
				start = i;
			}
			if(array[i] != x){
				newArray[start] = array[i];
				start++;
			}else{
				newArray[end] = array[i];
				end--;
			}
		}
		return newArray;
	}

	public static void main(String[] args) {
		int[] array = new int[]{1,5,3,6,0,5,7,0,0,4,0,1,6,7,5,4,3,5,3,2,1,5,6,0,0,0,3,2,0,1,1};
		for(int i : array){
			System.out.print(i);
		}
		int x = 1;
		array = moveIntToEnd(array, x);
		System.out.println("---------------------");
		for(int i : array){
			System.out.print(i);
		}
	}
}
//----------------------------------------------------------------------------------------------------------------
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;

public class TraverseDir {

	public static void traverseDir(File folder){
		
		File[] listOfFiles = folder.listFiles();

		for (File file : listOfFiles) {
		    if (file.isFile()) {
		        System.out.println(file.getName());
		    }else if(file.isDirectory()){
		    	traverseDir(file);
		    }
		}
	}
	
	public static void main(String[] args) {
		//Enter file/directory path name below.
		File folder = new File("");
		traverseDir(folder);
	}

}
